#!/usr/bin/env bash

PROJECTS_DIR=${GCD_PROJECTS_DIR:-${HOME}}
GCD_DIR="${HOME}/.gcd"
GCD_BIN="${GCD_DEV_BIN:-!!GCDLIBEXECBIN!!}"
CACHE_FILE="${GCD_DIR}/gcd.cache"

if [[ "$1" == "-h" ]] || [[ "$1" == "--help" ]]; then
  cat <<'EOT'
gcd - Copyright (c) 2021 by Ivo Woltring
A git change directory command...
Syntax: gcd [-h|--help|word|"regex"]
    -h        : this message
    --help    : this message
    word      : a spaceless string of characters to search for
    "regex"   : a regular expression (quoted) for what to search for
    <no param>: shows the top 10 projects in order of popularity
EOT
  return 0
fi

if [[ ! -d "${GCD_DIR}" ]]; then
  mkdir -p "${GCD_DIR}"
fi

if [[ ! -f "${GCD_DIR}/gcd.sqlite" ]]; then
  echo "Initializing metrics db..."
  python3 "${GCD_BIN}"/gcd.py --create-db
  if [[ -f "${CACHE_FILE}" ]]; then
    echo "Importing into metrics db..."
    python3 "${GCD_BIN}"/gcd.py --import-cache
  fi
fi

if [[ ! -f "${CACHE_FILE}" ]]; then
  echo "Scanning for git projects..."
  echo "This can take a while depending on the number of git projects found..."
  find "${PROJECTS_DIR}" -type d -name .git -execdir 'pwd' \; 2>/dev/null | sort >"${CACHE_FILE}"
  echo "Importing into metrics db..."
  python3 "${GCD_BIN}"/gcd.py --import-cache
fi

if ! python3 "${GCD_BIN}"/gcd.py --export-cache 2>/dev/null; then
  rm -rf "${GCD_DIR}" 2>/dev/null
  echo "[ERROR] The metrics db was corrupted. Fixed the problem. Please run again..."
  return 1
fi

if [[ -z "$1" ]]; then
  found=$(cat "${CACHE_FILE}" | sed "s~${PROJECTS_DIR}/~~g" | head -n "${GCD_FAVORITES:-10}")
else
  found=$(grep "$1" "${CACHE_FILE}")
fi

if [[ $(wc -l <<<"${found}") -gt 1 ]]; then
  lines=()
  while read -r line; do
    lines+=("${line/${PROJECTS_DIR}\//}")
  done <<<"${found}"
  count=$(wc -l <<<"${found}")
  PS3="Pick a project: "
  select chosen in "${lines[@]}"; do
    case $REPLY in
    q | 0)
      echo "Quitting...."
      return 0
      ;;
    *)
      if [[ 1 -le "$REPLY" ]] && [[ $REPLY -le ${count} ]]; then
        project="${PROJECTS_DIR}/${chosen}"
        if [[ ! -d ${project} ]]; then
          # if fully qualified outside HOME
          project="${chosen}"
        fi
        project="${project/?/ /}"
        python3 "${GCD_BIN}"/gcd.py --increment "${project}"
        echo "Changing to: $project"
        cd "${project}" || return 1
        break
      else
        echo "Wrong choice."
        echo "Please try again..."
      fi
      ;;
    esac
  done
else
  project=$(echo "${found}" | head -1)
  if [[ -z "${project}" ]]; then
    echo "Project not found..."
    return 1
  else
    python3 "${GCD_BIN}"/gcd.py --increment "${project}"
    echo "Changing to: ${project}"
    cd "${project}" || return 1
  fi
fi
